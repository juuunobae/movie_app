{"version":3,"sources":["movies.js","App.js","index.js"],"names":["Movie","title","year","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"qRAmCeA,MA9Bf,YAA0D,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACE,sBAAKC,UAAU,QAAf,UACE,qBAAKC,IAAKH,EAAQI,IAAKP,EAAOA,MAAOA,IACrC,sBAAKK,UAAU,cAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BL,IAC9B,oBAAIK,UAAU,cAAd,SAA6BJ,IAC7B,oBAAII,UAAU,gBAAd,SACGD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,oBAAIL,UAAU,gBAAd,SACGI,GADgCC,QAKvC,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gBCoDOC,G,kNA5DbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAIVC,U,sBAAY,8BAAAC,EAAA,sEAMAC,IAAMC,IACd,yEAPQ,gBAIEJ,EAJF,EAGRK,KACEA,KAAQL,OAQZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IAZzB,2C,uDAiBZ,WACEQ,KAAKN,c,oBAIP,WAAS,MAEuBM,KAAKT,MAA3BC,EAFD,EAECA,UAAWC,EAFZ,EAEYA,OAInB,OACE,yBAASV,UAAU,YAAnB,SACGS,EACC,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGU,EAAOP,KAAI,SAACe,GAAD,OACV,cAAC,EAAD,CAEEC,GAAID,EAAMC,GACVxB,MAAOuB,EAAMvB,MACbC,KAAMsB,EAAMtB,KACZC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAME,mBACdrB,OAAQmB,EAAMnB,QANTmB,EAAMC,e,GA7CTE,IAAMC,YCAxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.0c72542d.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\n// Movie들을 랜더링할 함수 componet를 생성 후 props를 인자로 받는다.\nfunction Movie({ title, year, summary, poster, genres }) {\n  return (\n    <div className=\"movie\">\n      <img src={poster} alt={title} title={title} />\n      <div className=\"movie__date\">\n        <h3 className=\"movie__title\">{title}</h3>\n        <h5 className=\"movie__year\">{year}</h5>\n        <ul className=\"movie__genres\">\n          {genres.map((genre, index) => (\n            <li className=\"genres__genre\" key={index}>\n              {genre}\n            </li>\n          ))}\n        </ul>\n        <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\n      </div>\n    </div>\n  );\n}\n\n// Movie component에서 사용할 prop들의 Type을 정의해준다.\nMovie.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  year: PropTypes.number.isRequired,\n  summary: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Movie;\n","// 파일에서 jsx를 사용하려면 React를 import 해주어야 한다.\n// jsx = html문법을 Javascript내부에 작성한 것\nimport React from \"react\";\n// API를 사용하기 위해서 axios를 설치 후 import 해준다.\nimport axios from \"axios\";\n// 각 movie들을 랜더링할 Moive component를 import 해준다.\nimport Movie from \"./movies\";\nimport \"./App.css\";\n\n// ReactDom에서 rendering 할 Component\nclass App extends React.Component {\n  state = {\n    isLoading: true, // API 응답이 완료되었는지 확인하는 변수\n    movies: [], // API 요청으로 응답받은 Movies를 담을 배열\n  };\n\n  // moive list의 API를 요청하는 함수\n  getMovies = async () => {\n    // axios로 API요청을 보내고 받은 데이터중에 필요한 부분을 ES6문법으로 필요한 movies배열을 사용하는 코드\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\n      \"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\"\n    );\n    // API요청으로 얻은 데이터를 setState로 state를 변경해준다.\n    // API요청으로 얻은 movies 배열을 state에서 정의한 movies 배열에 담는다.\n    // 요청이 끝나서 로딩도 끝났기 때문에 isLoading를 false로 바꿔준다.\n    this.setState({ movies, isLoading: false });\n  };\n\n  // component가 생성된 후 실행될 comnentDidMount를 생성해 API요청을 보낼 함수를 작성해준다.\n  // render함수가 실행된 후에 componentDidMount가 실행될 것이고, 그 안에 작성되어 있는 코드인 getMovies 함수를 실행시킬 것이다.\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  // 브라우저에 rendering할 코드 작성\n  render() {\n    // state에 정의한 변수들을 불러온다.\n    const { isLoading, movies } = this.state;\n    // isLoading이 true이면(API 응답이 아직 완료되지 않았을 때) 'Loading...'을 보여주고,\n    // isLoadingdl false이면(API 응답이 완료되었을때) movies.map을 실행시킨다.\n    // 브라우저에 보여줄 API데이터들을 props로 Movie component에 넘겨준다.\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map((movie) => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                title={movie.title}\n                year={movie.year}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// react앱을 최초 렌더링 하기위해 엔트리 포인트에서 쓰인다.\nimport App from \"./App\";\n// App이라는 리엑트 컴포넌트를 import 하는 것\n\n// 브라우저에 리액트 컴포넌트를 보여주기 위해서 ReactDom.render 함수를 사용한다.\n// 첫번 째 파라미터는 렌디링 할 결과물이고, 두번 째 파라미터는 컴포넌트를 렌더링 할 DOM이다.\n// id가 root인 태그에 App 컴포넌트를 렌더링하는 것\n// 해당 태그는 public/index.html 파일에서 찾는다.\nReactDOM.render(<App />, document.getElementById(\"root\"));\n// react application은 한 번에 하나의 component만 rendering 할 수 있다.\n// 새로운 component를 생성하면 App.js에 추가한다.\n"],"sourceRoot":""}